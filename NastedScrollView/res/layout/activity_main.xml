<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    tools:context=".MainActivity" >

    <androidx.core.widget.NestedScrollView
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:fillViewport="true">

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="vertical" >

            <TextView
                android:id="@+id/textView"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_margin="6dp"
                android:text="                android:text=&quot;Kotlin (/ˈkɒtlɪn/)[6] is a cross-platform, statically typed, general-purpose programming language with type inference. Kotlin is designed to interoperate fully with Java, and the JVM version of Kotlin's standard library depends on the Java Class Library,[7] but type inference allows its syntax to be more concise. Kotlin mainly targets the JVM, but also compiles to JavaScript (e.g., for frontend web applications using React[8]) or native code (via LLVM); e.g., for native iOS apps sharing business logic with Android apps.[9] Language development costs are borne by JetBrains, while the Kotlin Foundation protects the Kotlin trademark.[10]  On 7 May 2019, Google announced that the Kotlin programming language is now its preferred language for Android app developers.[11] Since the release of Android Studio 3.0 in October 2017, Kotlin has been included as an alternative to the standard Java compiler. The Android Kotlin compiler produces Java 6 bytecode by default (which runs in any later JVM), but lets the programmer choose to target Java 8 up to 15, for optimization,[12] or allows for more features, e.g. Java 8 related with Kotlin 1.4,[13] and has experimental record class support for Java 16 compatibility.[14]  Kotlin support for JavaScript (i.e. classic back-end) is considered stable in Kotlin 1.3 by its developers, while Kotlin/JS (IR-based) in version 1.4, is considered alpha. Kotlin/Native Runtime (for e.g. Apple support) is considered beta.[15]  &quot;                android:text=&quot;Kotlin (/ˈkɒtlɪn/)[6] is a cross-platform, statically typed, general-purpose programming language with type inference. Kotlin is designed to interoperate fully with Java, and the JVM version of Kotlin's standard library depends on the Java Class Library,[7] but type inference allows its syntax to be more concise. Kotlin mainly targets the JVM, but also compiles to JavaScript (e.g., for frontend web applications using React[8]) or native code (via LLVM); e.g., for native iOS apps sharing business logic with Android apps.[9] Language development costs are borne by JetBrains, while the Kotlin Foundation protects the Kotlin trademark.[10]  On 7 May 2019, Google announced that the Kotlin programming language is now its preferred language for Android app developers.[11] Since the release of Android Studio 3.0 in October 2017, Kotlin has been included as an alternative to the standard Java compiler. The Android Kotlin compiler produces Java 6 bytecode by default (which runs in any later JVM), but lets the programmer choose to target Java 8 up to 15, for optimization,[12] or allows for more features, e.g. Java 8 related with Kotlin 1.4,[13] and has experimental record class support for Java 16 compatibility.[14]  Kotlin support for JavaScript (i.e. classic back-end) is considered stable in Kotlin 1.3 by its developers, while Kotlin/JS (IR-based) in version 1.4, is considered alpha. Kotlin/Native Runtime (for e.g. Apple support) is considered beta.[15]  &quot;                android:text=&quot;Kotlin (/ˈkɒtlɪn/)[6] is a cross-platform, statically typed, general-purpose programming language with type inference. Kotlin is designed to interoperate fully with Java, and the JVM version of Kotlin's standard library depends on the Java Class Library,[7] but type inference allows its syntax to be more concise. Kotlin mainly targets the JVM, but also compiles to JavaScript (e.g., for frontend web applications using React[8]) or native code (via LLVM); e.g., for native iOS apps sharing business logic with Android apps.[9] Language development costs are borne by JetBrains, while the Kotlin Foundation protects the Kotlin trademark.[10]  On 7 May 2019, Google announced that the Kotlin programming language is now its preferred language for Android app developers.[11] Since the release of Android Studio 3.0 in October 2017, Kotlin has been included as an alternative to the standard Java compiler. The Android Kotlin compiler produces Java 6 bytecode by default (which runs in any later JVM), but lets the programmer choose to target Java 8 up to 15, for optimization,[12] or allows for more features, e.g. Java 8 related with Kotlin 1.4,[13] and has experimental record class support for Java 16 compatibility.[14]  Kotlin support for JavaScript (i.e. classic back-end) is considered stable in Kotlin 1.3 by its developers, while Kotlin/JS (IR-based) in version 1.4, is considered alpha. Kotlin/Native Runtime (for e.g. Apple support) is considered beta.[15]  &quot;"
                android:textAllCaps="false"
                android:textColor="#000000"
                android:textSize="22sp" />
        </LinearLayout>
    </androidx.core.widget.NestedScrollView>
</LinearLayout>